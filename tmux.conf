# Set the default shell to ZSH
set-option -g default-shell $SHELL

# Set the default colors
set -g default-terminal 'screen-256color'

# https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard
set-option -g default-command "tdc"

# Enable mouse scolling
setw -g mode-mouse on
setw -g mouse-select-window on
setw -g mouse-select-pane on

# Sane mouse scrolling
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# act like vim
setw -g mode-keys vi

# Pane resizing
bind < resize-pane -L 5
bind > resize-pane -R 5
bind - resize-pane -D 5
bind + resize-pane -U 5

# Set the time in milliseconds for which tmux waits after
# an escape is input to determine if it is part of a function
# or meta key sequences.  The default is 500 milliseconds.
set -sg escape-time 0

# start window numbers at 1 to match keyboard order with tmux window order
set -g base-index 1
set -g pane-base-index 1
setw -g base-index 1
setw -g pane-base-index 1

# renumber windows sequentially after closing any of them
set -g renumber-windows on

# Automatically set window title
setw -g automatic-rename

# increase scrollback lines
set -g history-limit 5000

# By default, all windows in a session are constrained to the size of the
# smallest client connected to that session,
# even if both clients are looking at different windows.
# It seems that in this particular case, Screen has the better default
# where a window is only constrained in size if a smaller client
# is actively looking at it.
setw -g aggressive-resize on

# enable activity alerts
setw -g monitor-activity on
set -g visual-activity on

# utf8 support
set-window-option -g utf8 on
set-option -g status-utf8 on

# smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# tmux powerline config
set-option -g status on
set-option -g status-interval 2
set-option -g status-justify "left"
set-option -g status-left-length 60
set-option -g status-right-length 90
set-option -g status-left "#($DOTFILES/tmux/tmux-powerline/powerline.sh left)"
set-option -g status-right "#($DOTFILES/tmux/tmux-powerline/powerline.sh right)"

# Setup 'v' to begin selection as in Vim
# http://robots.thoughtbot.com/post/55885045171/tmux-copy-paste-on-os-x-a-better-future
bind-key -t vi-copy v begin-selection
if-shell '[[ ! -z "$OSX" ]]' 'bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"' 'bind-key -t vi-copy y copy-pipe "xclip -selection c"'

# Update default binding of 'Enter' to also use copy-pipe
unbind -t vi-copy Enter
if-shell '[[ ! -z "$OSX" ]]' 'bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"' 'bind-key -t vi-copy Enter copy-pipe "xclip -selection c"'

