# Set the default shell to ZSH
set-option -g default-shell $SHELL

# Set the default colors
set -g default-terminal 'screen-256color'

# Enable mouse scolling
set -g mode-mouse on
set -g mouse-select-window on
set -g mouse-select-pane on
set -g mouse-resize-pane on

# Sane mouse scrolling
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# Shutup tmux + mutt
set -g bell-action none
set -g visual-bell off

# act like vim
setw -g mode-keys vi

# Pane resizing
bind ( resize-pane -L 5
bind ) resize-pane -R 5
bind - resize-pane -D 5
bind + resize-pane -U 5

# Set the time in milliseconds for which tmux waits after
# an escape is input to determine if it is part of a function
# or meta key sequences.  The default is 500 milliseconds.
set -sg escape-time 0

# start window numbers at 1 to match keyboard order with tmux window order
set -g base-index 1
set -g pane-base-index 1
setw -g base-index 1
setw -g pane-base-index 1

# Make sure tmux reports focus changes for vitality.vim
set -g focus-events on

# renumber windows sequentially after closing any of them
set -g renumber-windows on

# Automatically set window title
set-window-option -g automatic-rename on

# increase scrollback lines
set -g history-limit 5000

# By default, all windows in a session are constrained to the size of the
# smallest client connected to that session,
# even if both clients are looking at different windows.
# It seems that in this particular case, Screen has the better default
# where a window is only constrained in size if a smaller client
# is actively looking at it.
setw -g aggressive-resize on

# enable activity alerts
setw -g monitor-activity off
set -g visual-activity off

# utf8 support
set-window-option -g utf8 on
set-option -g status-utf8 on

# smart pane switching
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Switch windows with Control arrows
bind-key -nr C-Right select-window -n
bind-key -nr C-Left select-window -p

# Easier reload
bind R source-file ~/.tmux.conf \; display "Reloaded!"

unbind-key c
bind-key c run "tmux-resume new-window"
unbind-key %
bind-key % run "tmux-resume split-window -h"
unbind-key '"'
bind-key '"' run "tmux-resume split-window -v"

# Swap windows with Shift-Control arrows
bind-key -n C-S-Left swap-window -t -1
bind-key -n C-S-Right swap-window -t +1

# Status line configuration
set-option -g status on
set-option -g status-interval 5
set-option -g status-justify left
# Status line contents
set-option -g status-left ""
set-option -g status-right "#(unreadmailcount)"

# Status line colors
# Use this for determining colors (look in the first 16):
# for i in {0..255} ; do
#   printf "\x1b[38;5;${i}mcolour${i}\n"
# done

# The background color of the status bar
set-option -g status-bg colour0
# The default text color on the status bar
set-option -g status-fg colour10
set-option -g status-attr default

# The foreground text color of the window labels
set-window-option -g window-status-fg colour10
# The background color of the window labels
set-window-option -g window-status-bg colour8

# Active window title colors
set-window-option -g window-status-current-fg colour9
set-window-option -g window-status-current-bg default

# Window bell colors
set-option -g window-status-bell-fg colour9
set-option -g window-status-bell-bg colour8

# Pane border colors
set-option -g pane-border-fg colour10
set-option -g pane-active-border-fg colour9

# Message text
set-option -g message-bg colour8
set-option -g message-fg colour9

# Pane number display
# For use with <leader>q
set-option -g display-panes-active-colour colour9
set-option -g display-panes-colour colour10

# Copy mode colors
set-window-option -g mode-fg colour3
set-window-option -g mode-bg colour0


# Setup 'v' to begin selection as in Vim
# http://robots.thoughtbot.com/post/55885045171/tmux-copy-paste-on-os-x-a-better-future
bind-key -t vi-copy v begin-selection
if-shell '[[ ! -z "$OSX" ]]' 'bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"' 'bind-key -t vi-copy y copy-pipe "xclip -selection c"'

# Update default binding of 'Enter' to also use copy-pipe
unbind -t vi-copy Enter
if-shell '[[ ! -z "$OSX" ]]' 'bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"' 'bind-key -t vi-copy Enter copy-pipe "xclip -selection c"'
