#!/usr/bin/env swift

// Contacts searching for mutt
// In your muttrc:
//
//   set query_command="contacts '%s'"
//   bind editor <Tab> complete-query
//

import AddressBook

let arguments = Process.arguments.dropFirst()
if arguments.isEmpty {
  exit(EXIT_FAILURE)
}

guard let addressBook = ABAddressBook.sharedAddressBook() else {
    fputs("Failed to initialize address book\n", stderr)
    exit(EXIT_FAILURE)
}

let searchString = arguments.joinWithSeparator(" ")
let comparison: ABSearchComparison = CFIndex(kABContainsSubStringCaseInsensitive.rawValue)
let firstNameSearch = ABPerson.searchElementForProperty(kABFirstNameProperty,
                                                        label: nil,
                                                        key: nil,
                                                        value: searchString,
                                                        comparison: comparison)
let lastNameSearch = ABPerson.searchElementForProperty(kABLastNameProperty,
                                                       label: nil,
                                                       key: nil,
                                                       value: searchString,
                                                       comparison: comparison)
let emailSearch = ABPerson.searchElementForProperty(kABEmailProperty,
                                                    label: nil,
                                                    key: nil,
                                                    value: searchString,
                                                    comparison: comparison)
let comparisons = [firstNameSearch, lastNameSearch, emailSearch]
let orComparison = ABSearchElement(forConjunction: CFIndex(kABSearchOr.rawValue), children: comparisons)
let found = addressBook.recordsMatchingSearchElement(orComparison) as? [ABRecord] ?? []

if found.count == 0 {
  exit(EXIT_SUCCESS)
}

print("NAME\tEMAIL")
for person in found {
  let firstName = person.valueForProperty(kABFirstNameProperty) as? String ?? ""
  let lastName = person.valueForProperty(kABLastNameProperty) as? String ?? ""
  let emailsProperty = person.valueForProperty(kABEmailProperty) as? ABMultiValue
  if let emails = emailsProperty {
    for i in 0..<emails.count() {
      let email = emails.valueAtIndex(i) as? String ?? ""
      print("\(email)\t\(firstName) \(lastName)")
    }
  }
}
