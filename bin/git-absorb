#!/usr/bin/env python3

from typing import List, Dict, Tuple
import argparse
import os
import subprocess
import sys


class _MultipleCommits(Exception):
    def __init__(self, filepath: str):
        super(_MultipleCommits, self).__init__(filepath)
        self.filepath = filepath


class _GitError(Exception):
    pass


def _build_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-s",
        action="store_true",
        dest="sign_off",
        help="Add Signed-off-by to commit",
    )
    parser.add_argument(
        "--squash",
        action="store_true",
        help="Squash the commit instead of adding a new commit to the branch",
    )
    return parser


def _run_git_command(args: List[str]) -> str:
    try:
        output: bytes = subprocess.check_output(["git"] + args)
        # TODO: got an exception here at some point
        return output.strip().decode("utf-8")
    except subprocess.CalledProcessError:
        raise _GitError()
    except UnicodeDecodeError:
        print(f"error: output was {output}")
        raise


def _is_in_repo() -> bool:
    try:
        _run_git_command(["rev-parse", "--show-toplevel"])
        return True
    except _GitError:
        return False


def _get_staged_files() -> List[str]:
    statuses = _run_git_command(
        ["diff", "--cached", "--name-status"]
    ).splitlines()
    files = []
    for status in statuses:
        # Modified files are formatted as M<tab>filepath
        # Renamed files are formatted as R%<tab>old path<tab>new path
        files.extend(status.split("\t")[1:])

    return files


def _get_modified_files() -> List[str]:
    return _run_git_command(["diff", "--name-only"]).splitlines()


def _get_possible_shas() -> List[str]:
    return _run_git_command(
        ["log", "--pretty=%H", "@{upstream}..HEAD"]
    ).splitlines()


def _get_changed_files() -> Tuple[List[str], bool]:
    staged_files = _get_staged_files()
    if staged_files:
        return (staged_files, False)

    modified_files = _get_modified_files()
    if modified_files:
        return (modified_files, True)

    return ([], False)


def _files_for_sha(sha: str) -> List[str]:
    return _run_git_command(
        ["show", "--name-only", "--pretty=", sha]
    ).splitlines()


def _shas_by_file(shas: List[str], changed_files: List[str]) -> Dict[str, str]:
    shas_by_file: Dict[str, str] = {}
    for sha in shas:
        for filepath in _files_for_sha(sha):
            if filepath not in changed_files:
                continue

            if filepath in shas_by_file:
                raise _MultipleCommits(filepath)
            shas_by_file[filepath] = sha

    return shas_by_file


def _main(squash: bool, sign_off: bool) -> None:
    if not _is_in_repo():
        sys.exit("error: not in git repo")

    possible_shas = _get_possible_shas()
    if not possible_shas:
        sys.exit("error: no commits ahead of upstream")

    changed_files, stage_first = _get_changed_files()
    if not changed_files:
        sys.exit("error: no changed files")

    try:
        shas_by_file = _shas_by_file(possible_shas, changed_files)
    except _MultipleCommits as e:
        sys.exit("error: multiple commits edit '{}'".format(e.filepath))

    matching_shas = set(
        shas_by_file[filepath]
        for filepath in changed_files
        if filepath in shas_by_file
    )
    if not matching_shas:
        sys.exit(
            "error: no commits changed: {}".format(", ".join(changed_files))
        )
    elif len(matching_shas) > 1:
        # TODO: fuzzy find commits
        sys.exit("error: files where changed in multiple recent commits")

    if stage_first:
        _run_git_command(["add"] + changed_files)

    args = []
    if squash:
        args.append("-m 'ignore, will be squashed'")
    if sign_off:
        args.append("-s")

    code = os.system("git commit {}".format(" ".join(args)))
    if code != 0:
        sys.exit("Not updating PR without a commit")

    update_command = ["git", "updatepr", matching_shas.pop()]
    if squash:
        update_command.append("--squash")

    subprocess.check_call(update_command)


if __name__ == "__main__":
    args = _build_parser().parse_args()
    _main(args.squash, args.sign_off)
