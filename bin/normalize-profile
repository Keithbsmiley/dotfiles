#!/usr/bin/env python3

import argparse
import plistlib
import subprocess
import sys

_NOISY_FIELDS = [
    "CreationDate",
    "ExpirationDate",
    "TimeToLive",
    "UUID",
]

parser = argparse.ArgumentParser()
parser.add_argument("profile", help="The provisioning file to process")
parser.add_argument(
    "--ignore-invalid",
    action="store_true",
    help="Ignore invalid profiles and print a constant string",
)
parser.add_argument(
    "--ignore-field",
    action="append",
    help="Fields to strip from the profile for diffing, useful to ignore things that always change like UUID",
    default=[],
)
parser.add_argument(
    "--ignore-noisy-fields",
    action="store_true",
    help="Ignore fields in the profile that always change such as UUID or creation and expiration dates",
    default=False,
)
args = parser.parse_args()
fields_to_ignore = args.ignore_field
if args.ignore_noisy_fields:
    fields_to_ignore.extend(_NOISY_FIELDS)

try:
    process = subprocess.run(
        ["security", "cms", "-D", "-i", args.profile],
        stdout=subprocess.PIPE,
        stderr=subprocess.DEVNULL,
        check=True,
    )

    plist = plistlib.loads(process.stdout)
    for field in fields_to_ignore:
        if field in plist:
            del plist[field]

    plistlib.dump(
        plist, sys.stdout.buffer, fmt=plistlib.FMT_XML, sort_keys=True
    )
except subprocess.CalledProcessError:
    if args.ignore_invalid:
        print("warning: failed to read profile")
    else:
        sys.exit(f"error: failed to parse '{args.profile}'")
