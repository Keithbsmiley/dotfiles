#!/usr/bin/env runhaskell

module ParseColor where

import Text.Parsec
import Text.Parsec.String
import Text.ParserCombinators.Parsec.Token
import Text.Parsec.Language (haskellDef)

type Color = String

parseColor :: String -> [String]
parseColor x =
  case parse lineParser "" x of
    Left _ -> []
    Right x -> x

lineParser :: Parser [String]
lineParser = do
  let lexer = makeTokenParser haskellDef
  optional $ string "rgb"
  spaces
  optional $ char '('
  -- nums <- many1 digit
  let c = commaSep lexer
  nums <- c $ many1 digit
  optional $ char ')'
  return $ nums

convertIntegers :: [String] -> [Int]
convertIntegers = map read

toFloat :: Int -> Float
toFloat x = fromIntegral x

main = do
  let str = "rgb(141,194,61)"
  mapM_ putStrLn $ map (++ "/255.0f") $ parseColor str
