#!/bin/bash

set -euo pipefail
set -x

readonly commit_arg="${1:-HEAD}"
if [[ $# -gt 0 ]]; then
  shift
fi

readonly commit="$(git rev-parse "$commit_arg")"
readonly branch_name="ks/$(git show --no-patch --format=%f "$commit" | tr '[:upper:]' '[:lower:]')"

if git show-ref --verify --quiet refs/heads/"$branch_name"; then
  echo "error: branch named '$branch_name' already exists" >&2
  exit 1
fi

branch_with_remote=$(git rev-parse --abbrev-ref --symbolic-full-name "@{upstream}")
remote_branch_name="${branch_with_remote#*/}"

git branch --no-track "$branch_name" "@{upstream}"

git worktree prune
readonly worktree_name=$(git rev-parse --show-toplevel | md5)
readonly worktree_dir="/tmp/$worktree_name"
# If the OS cleaned the directory in the /tmp dir, it maybe exist but be empty
rmdir "$worktree_dir" 2>/dev/null || true
if [[ ! -d "$worktree_dir" ]]; then
  git worktree add "$worktree_dir" "$branch_name"
else
  if ! git -C "$worktree_dir" switch "$branch_name"; then
    # TODO: should this be -D?
    git branch -d "$branch_name"
    exit 1
  fi
fi

_checkout_empty() {
  git -C "$worktree_dir" switch -C "empty-$worktree_name" --quiet
}

if ! git -C "$worktree_dir" cherry-pick "$commit"; then
  if git -C "$worktree_dir" mergetool; then
    git -C "$worktree_dir" -c core.editor=true cherry-pick --continue
  else
    # TODO: should this be -D?
    git -C "$worktree_dir" cherry-pick --abort
    _checkout_empty
    git branch -d "$branch_name"
    exit 1
  fi
fi

if git -C "$worktree_dir" push --quiet --set-upstream origin "$branch_name"; then
  # TODO maybe ghb should support -C ?
  pushd "$worktree_dir" >/dev/null
  ghb pr --no-edit --draft "$remote_branch_name" "$@"
  popd
elif git -C "$worktree_dir" push --quiet --set-upstream mine "$branch_name"; then
  git -C "$worktree_dir" open --remote mine "pull/new/$branch_name"
else
  echo "error: failed to create remote branch" >&2
  _checkout_empty
  git branch -d "$branch_name"
fi

_checkout_empty
