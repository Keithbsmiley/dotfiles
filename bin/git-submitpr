#!/bin/bash

set -euo pipefail
set -x

readonly commit_arg="${1:-HEAD}"
readonly commit="$(git rev-parse "$commit_arg")"
readonly branch_name="ks/$(git show --no-patch --format=%f "$commit" | tr '[:upper:]' '[:lower:]')"

if git show-ref --verify --quiet refs/heads/"$branch_name"; then
  echo "error: branch named '$branch_name' already exists" >&2
  exit 1
fi

git branch --no-track "$branch_name" "@{upstream}"

git worktree prune
readonly worktree_dir="/tmp/$(git rev-parse --show-toplevel | md5)"
if [[ ! -d "$worktree_dir" ]]; then
  git worktree add "$worktree_dir" "$branch_name"
else
  git -C "$worktree_dir" switch "$branch_name"
fi

_checkout_empty() {
  git -C "$worktree_dir" switch -C empty --quiet
}

if ! git -C "$worktree_dir" cherry-pick "$commit"; then
  if ! git -C "$worktree_dir" mergetool; then
    # TODO: should this be -D?
    git -C "$worktree_dir" cherry-pick --abort
    _checkout_empty
    git branch -d "$branch_name"
    exit 1
  fi
fi

if git -C "$worktree_dir" push --quiet --set-upstream origin "$branch_name"; then
  # TODO maybe ghb should support -C ?
  pushd "$worktree_dir" >/dev/null
  ghb pr --draft "$@"
  popd
elif git -C "$worktree_dir" push --quiet --set-upstream mine "$branch_name"; then
  git -C "$worktree_dir" open --remote mine "pull/new/$branch_name"
fi

_checkout_empty
