#!/bin/bash

set -euo pipefail
set -x

if [[ $# -lt 1 ]]; then
  echo "usage: $0 <new_sha> [<sha_to_update>]" >&2
  exit 1
fi

readonly commit_to_update=$1
readonly new_refspec=$(git rev-parse "${2:-HEAD}")

if ! git cat-file -e "$commit_to_update" 2> /dev/null; then
  echo "error: invalid commit sha: '$commit_to_update'" >&2
  exit 1
fi

readonly branch_name="ks/$(git show --no-patch --format=%f "$commit_to_update" | tr '[:upper:]' '[:lower:]')"
if ! git show-ref --verify --quiet refs/heads/"$branch_name"; then
  echo "error: branch '$branch_name' doesn't exist" >&2
  exit 1
fi

did_stash=false
if ! git switch "$branch_name"; then
  git stash push -m "$0 $branch_name"
  did_stash=true

  if ! git switch "$branch_name"; then
    git stash pop
    exit 1
  fi
fi

_restore_state() {
  git switch "@{-1}"
  if $did_stash; then
    git stash pop
  fi
}

if ! git cherry-pick "$new_refspec^..@{-1}"; then
  if ! git mergetool; then
    _restore_state
  fi

  exit 1
fi

git push --quiet || echo "warning: failed to push '$branch_name'" >&2
_restore_state

export GIT_SEQUENCE_EDITOR=true

git rebase --interactive --exec "git commit --amend --fixup '$commit_to_update'" "$new_refspec"^
git rebase --interactive --autosquash "$commit_to_update"^
