#!/bin/bash

set -euo pipefail
set -x

if [[ $# -lt 1 ]]; then
  echo "usage: $0 <new_sha> [<sha_to_update>]" >&2
  exit 1
fi

readonly commit_to_update=$1
readonly new_refspec=$(git rev-parse "${2:-HEAD}")
readonly base_refspec=$(git rev-parse HEAD)

if ! git cat-file -e "$commit_to_update" 2> /dev/null; then
  echo "error: invalid commit sha: '$commit_to_update'" >&2
  exit 1
fi

readonly branch_name="ks/$(git show --no-patch --format=%f "$commit_to_update" | tr '[:upper:]' '[:lower:]')"
if ! git show-ref --verify --quiet refs/heads/"$branch_name"; then
  echo "error: branch '$branch_name' doesn't exist" >&2
  exit 1
fi

git worktree prune
readonly worktree_name=$(git rev-parse --show-toplevel | md5)
readonly worktree_dir="/tmp/$worktree_name"
if [[ ! -d "$worktree_dir" ]]; then
  git worktree add "$worktree_dir" "$branch_name"
else
  git -C "$worktree_dir" switch "$branch_name"
fi

_checkout_empty() {
  git -C "$worktree_dir" switch -C "empty-$worktree_name" --quiet
}

if ! git -C "$worktree_dir" cherry-pick "$new_refspec^..$base_refspec"; then
  if git -C "$worktree_dir" mergetool; then
    git -C "$worktree_dir" cherry-pick --continue
  else
    git -C "$worktree_dir" cherry-pick --abort
    _checkout_empty
    # TODO what do i do? i think we have to reset branch state? maybe just abort cherry pick?
    exit 1
  fi
fi

git -C "$worktree_dir" push --quiet || echo "warning: failed to push '$branch_name'" >&2

export GIT_SEQUENCE_EDITOR=true

git rebase --interactive --exec "git commit --amend --fixup '$commit_to_update'" "$new_refspec"^
git rebase --interactive --autosquash "$commit_to_update"^
_checkout_empty
