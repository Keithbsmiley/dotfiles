#!/bin/bash

set -euo pipefail

if [[ -n "${GIT_PILE_VERBOSE:-}" ]]; then
  set -x
fi

readonly commit_to_rebase=${1:-HEAD}
readonly branch_name="${GIT_PILE_PREFIX:-}$(git show --no-patch --format=%f "$commit_to_rebase" | tr '[:upper:]' '[:lower:]')"
if ! git show-ref --verify --quiet refs/heads/"$branch_name"; then
  echo "error: branch '$branch_name' doesn't exist" >&2
  exit 1
fi

readonly worktree_name=$(git rev-parse --show-toplevel | md5)
readonly worktree_dir="$HOME/.cache/git-pile/$worktree_name"
if [[ ! -d "$worktree_dir" ]]; then
  git worktree add "$worktree_dir" "$branch_name"
else
  git -C "$worktree_dir" switch "$branch_name"
fi

_detach_branch() {
  git -C "$worktree_dir" switch --detach --quiet
}

trap _detach_branch EXIT

branch_with_remote=$(git rev-parse --abbrev-ref --symbolic-full-name "@{upstream}")
# TODO: if this fails start a mergetool?
git -C "$worktree_dir" rebase "$branch_with_remote"
git -C "$worktree_dir" push --force-with-lease --quiet
